This is a follow up on 'JS Core - Throttle Function', please refer to it for detailed explanation.

In this problem, you are asked to implement a enhanced throttle() which accepts third parameter, option: {leading: boolean, trailing: boolean}

leading: whether to invoke right away
trailing: whether to invoke after the delay.

'JS Core - Throttle Function' is the default case with {leading: true, trailing: true}.

Function signature:
```
function throttle(func, wait, option = { leading: true, trailing: true })
```

Below given code will be used to perform testing in the background:
```
const run = (input, leading, trailing) => {
      const calls = [];

      const func = (arg) => {
        calls.push(`${arg}`);
      };

      const throttled = throttle(func, 3, {leading, trailing});
      input.forEach((call) => {
        const [arg, time] = call.split('@')
        setTimeout(() => throttled(arg), time)
      });
      return calls;
};
```
Example 1:
Input:
```
run(["A@0", "B@2", "C@3"], true, true)
```
Ouput:
```
['A', 'C']
```

Example 2:
Input:
```
run(["A@0", "B@2", "C@3"], true, false)
```
Ouput:
```
['A']
```